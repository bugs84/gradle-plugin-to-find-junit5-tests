/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.quadient.plugin.test.finder

import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.plugins.JavaPluginConvention
import org.gradle.api.tasks.JavaExec
import org.gradle.api.tasks.TaskAction
import org.junit.platform.engine.discovery.DiscoverySelectors
import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder
import org.junit.platform.launcher.core.LauncherFactory
import java.io.File
import java.nio.file.Path
import java.nio.file.Paths


open class MyTask : DefaultTask() {


    @TaskAction
    fun greet() {
        println("MY TAAAAAAAASSSKKKK")

//        val a = project.configurations.getByName("testCompile").resolve()
//        println(a)
    }
}

//tasks.register<GreetingToFileTask>("greet") {
//    destination = { project.extra["greetingFile"]!! }
//}

/**
 * A simple 'hello world' plugin.
 */
class TestFinderPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        // Register a task
        project.tasks.register("greeting") { task ->
            task.group = "test-finder"
            task.doLast {
                println("Hello from plugin 'com.quadient.plugin.test.finder.greeting'")
            }
        }

        project.tasks.register("testFindTry") { task ->
            task.group = "test-finder"
            task.doLast {
                println("Hello from testFind plugin")
            }
        }




        project.tasks.register("test5") { task ->         // Slepá větev - prostě potřebuješ ten LaucherDiscoveryPustit a mít tam ty testy
            //TADY jsou spravne adreare, ale nehleda to

            task.group = "test-finder"
            task.dependsOn("testClasses")

//            val javaPlugin = project.convention.getPlugin(JavaPlugin::class.java)
            val javaPluginConvention = project.convention.getPlugin(JavaPluginConvention::class.java)
            val classPathWithTests = javaPluginConvention.sourceSets.getByName("test").runtimeClasspath
//            task.classpath = runtimeClasspath

//             javaPlugin.sourc
//            final SourceSet smoketest = sourceSets.findByName("smoketest");
//            this.testClasspath = smoketest.getRuntimeClasspath();
//            task.classpath = project.rootProject.sourceSets["main"].runtimeClasspath
//            task.main = "HelloKt"
            task.doLast {
                val toSet = mutableSetOf<Path>()

//             TODO this   classPathWithTests.asPath
//                toSet.add(Paths.get("C:\\PRAC\\GradlePlugin\\ab-usage\\build\\classes\\kotlin\\test"))
                val pathsSet = classPathWithTests.toSet().map { it.toPath() }.toMutableSet()

                val build = LauncherDiscoveryRequestBuilder.request()
                        .selectors(DiscoverySelectors.selectClasspathRoots(pathsSet))
//                        .selectors(DiscoverySelectors.selectPackage(""))
                        .build()
                val launcher = LauncherFactory.create()
                val testPlan = launcher.discover(build)
                val tests = testPlan.roots.flatMap { testPlan.getDescendants(it) } + testPlan.roots

                println("Tests count '${tests.size}'")
                tests.forEach { println("Test - $it") }
            }
        }


        project.tasks.register("test4", JavaExec::class.java) { task ->    //!!!!!!!!!!!!!!!!!!!!!!!!!!! Tohle něco hledá
            //TOHLE HLEDA, ale HelloKt je na classpathe od testu spatny


            task.group = "test-finder"
            task.dependsOn("testClasses")

//            val javaPlugin = project.convention.getPlugin(JavaPlugin::class.java)
            val javaPluginConvention = project.convention.getPlugin(JavaPluginConvention::class.java)
            val runtimeClasspath = javaPluginConvention.sourceSets.getByName("test").runtimeClasspath
            task.classpath = runtimeClasspath

//             javaPlugin.sourc
//            final SourceSet smoketest = sourceSets.findByName("smoketest");
//            this.testClasspath = smoketest.getRuntimeClasspath();
//            task.classpath = project.rootProject.sourceSets["main"].runtimeClasspath
            task.main = "HelloKt"
        }


//        task runPhotoSorter(type: JavaExec) {
//               dependsOn classes
//               classpath sourceSets.main.runtimeClasspath
//               main = 'cz.vondr.photosorter.MainRun'
//           }
//
        project.tasks.register("test3Dva", JavaExec::class.java) { task ->
            task.group = "test-finder"
            task.dependsOn("testClasses")

//            val javaPlugin = project.convention.getPlugin(JavaPlugin::class.java)
            val javaPluginConvention = project.convention.getPlugin(JavaPluginConvention::class.java)
            val runtimeClasspath = javaPluginConvention.sourceSets.getByName("main").runtimeClasspath
            task.classpath = runtimeClasspath

//             javaPlugin.sourc
//            final SourceSet smoketest = sourceSets.findByName("smoketest");
//            this.testClasspath = smoketest.getRuntimeClasspath();
//            task.classpath = project.rootProject.sourceSets["main"].runtimeClasspath
            task.main = "HelloKt"
        }

        project.tasks.register("test3") { task ->
            task.group = "test-finder"
            task.dependsOn("test")
            task.doLast {
                println("DDDDDDOOOLAAAST")
                findTests1()
            }
        }

        project.tasks.register("testFind22") { task ->
            task.group = "test-finder"
            task.dependsOn("testClasses")
            task.doLast {
                println("Hello from testFind22")

//
//                val conf1 = project.configurations.getByName("testRuntimeClasspath")
//
//                val toSet = conf1.map { it.toPath() }.toMutableSet()

                findTests1()
//                val resolve = conf1.resolve()

                val i = 1
            }
        }

        project.tasks.register("myTask", MyTask::class.java)

        project.tasks.register("testFind", TestFinder::class.java) { task ->
            task.group = "test-finder"
        }




        project.configurations.create("distributedTestRunner")
        project.dependencies.add("distributedTestRunner", "org.junit.jupiter:junit-jupiter-engine:5.5.2")
        project.dependencies.add("distributedTestRunner", "org.junit.platform:junit-platform-launcher:1.5.2")

        project.tasks.register("testFind2", TestFinder::class.java) { task ->
            task.group = "test-finder"


            val javaPluginConvention = project.convention.getPlugin(JavaPluginConvention::class.java)
            val runtimeClasspath = javaPluginConvention.sourceSets.getByName("test").runtimeClasspath


            task.testClasspath = runtimeClasspath
            task.outputFile = project.buildDir.resolve("testyyyyy.dejv.txt")
        }

//        project.tasks.register("testFind") { task ->
//
//        }
    }

    private fun findTests1() {
        val toSet = mutableSetOf<Path>()

        toSet.add(Paths.get("C:\\PRAC\\GradlePlugin\\ab-usage\\build\\classes\\kotlin\\test"))

        val build = LauncherDiscoveryRequestBuilder.request()
                .selectors(DiscoverySelectors.selectClasspathRoots(toSet))
                .build()
        val launcher = LauncherFactory.create()
        val testPlan = launcher.discover(build)
        val tests = testPlan.roots.flatMap { testPlan.getDescendants(it) } + testPlan.roots

        println("Tests count '${tests.size}'")
        tests.forEach { println("Test - $it") }
    }
}
